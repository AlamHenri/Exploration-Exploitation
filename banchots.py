import random as r
import math as m
import matplotlib.pyplot as plt
import numpy as np
# Global variables
NB_LEVIERS = 5
RECOMPENSE_MAX = 5
NB_ITER = 4000

def jouer(machines,action):
    proba = machines[action]
    if r.random() < proba :
        return 1
    else :
        return 0

def alea(recomp,memo):
    indice = r.randint(0,len(recomp)-1)
    return indice

def greedy(recomp,memo):
    tab = [0]*len(recomp)
    for i in range(10 * len(recomp)):
        levier = alea(recomp,memo)
        tab[levier] += recomp[levier]

    imaxi , maxi = (0,0)
    for i in range(len(tab)):
        if tab[i] > maxi :
            maxi = tab[i]
            imaxi = i
    return imaxi

def epsgreedy(recomp,memo):
    epsilon = r.random()
    tab = [0]*len(recomp)
    for i in range(10 * len(recomp)):
        if (r.random() < epsilon):
            levier = alea(recomp, memo)
            tab[levier] += recomp[levier]
        else :
            levier = greedy(recomp, memo)
            tab[levier] += recomp[levier]

    imaxi,maxi = (0,0)
    for i in range(len(tab)):
        if tab[i] > maxi :
            maxi = tab[i]
            imaxi = i
    return imaxi


def UCB(recomp,memo):
    nb_parties = np.sum(memo) # Nb de parties jouees
    tab = [nb_parties]*len(recomp)
    for i in range(1, 10 * len(recomp)):
        levier = alea(recomp,memo)
        if(memo[levier] != 0):
            tab[levier] = recomp[levier] + m.sqrt( 2*m.log(i) / float(memo[levier]) )

    imaxi,maxi = (0,0)
    for i in range(len(tab)):
        if tab[i] > maxi :
            maxi = tab[i]
            imaxi = i
    return imaxi


Leviers = [r.random() for i in range(NB_LEVIERS)] # Tableaux de probas
print(Leviers)


"""                                                                                                      
action = r.randint(0,len(Leviers)-1)                                                                     
print(jouer(Leviers,action))                                                                             
"""


Memos = [0]*len(Leviers) # Tableau de memoire
Recomp = [0]*len(Leviers) # Tableau de reco

for i in range(len(Leviers)):
    for k in range(10):
        Recomp[i] += jouer(Leviers,i)
        Memos[i] += 1
        Recomp[i] /= 10.0

print(Recomp)

"""for i in range(0,100):
   # ind = alea(Recomp,Memos)
    ind = UCB(Recomp,Memos)
    win = jouer(Leviers,ind)
    Memos[ind] += 1
    Recomp[ind] =  ( ( Recomp[ind] * (Memos[ind]-1)) + win ) / float(Memos[ind])

print(Recomp)
print(Memos)
"""
meilleur_machine = np.argmax(Leviers) ## ON CHOISIT LA MEILLEURE ACTION
sum_max = [0.0]*NB_ITER

sum_alea = [0.0]*NB_ITER
sum_greedy = [0.0]*NB_ITER
sum_epsgreedy = [0.0]*NB_ITER
sum_UCB = [0.0]*NB_ITER

regrets_alea = [0.0]*NB_ITER
regrets_greedy = [0.0]*NB_ITER
regrets_epsgreedy = [0.0]*NB_ITER
regrets_UCB = [0.0]*NB_ITER

for i in range(1,NB_ITER):
    sum_max[i] = sum_max[i-1] + jouer(Leviers,meilleur_machine)
    sum_alea[i] = sum_alea[i-1] + jouer(Leviers, alea(Recomp,Memos))
    sum_greedy[i] = sum_greedy[i-1] + jouer(Leviers,greedy(Recomp,Memos))
    sum_epsgreedy[i] = sum_epsgreedy[i-1] + jouer(Leviers,epsgreedy(Recomp,Memos))
    sum_UCB[i] = sum_UCB[i-1] + jouer(Leviers,UCB(Recomp,Memos))


    regrets_alea[i] = sum_max[i] - sum_alea[i]
    regrets_greedy[i] = sum_max[i] - sum_greedy[i]
    regrets_epsgreedy[i] = sum_max[i] - sum_epsgreedy[i]
    regrets_UCB[i] = sum_max[i] - sum_UCB[i]

"""
On cree une IA qui choisit la machine avec la meilleure proba a chaque fois et on somme ces gains la 

Ensuite on fait notre programme on calcule la somme et on plot la difference de ces deux termes 

"""

plt.plot(range(NB_ITER),regrets_alea, label = "Alea")
plt.plot(range(NB_ITER),regrets_greedy, label = "greedy")
plt.plot(range(NB_ITER),regrets_epsgreedy, label = "eps-greedy")
plt.plot(range(NB_ITER),regrets_UCB, label = "UCB")


plt.title("Comparaison des diff√©rentes approches et de leur regret respectifs ")
plt.legend()

plt.show()